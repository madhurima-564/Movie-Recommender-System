# -*- coding: utf-8 -*-
"""Movie Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jnUGXWY7KUVCDiUvnNy-5x3FBO6r7TL_
"""

import numpy as np
import pandas as pd
import ast

mov = pd.read_csv('/content/tmdb_5000_movies.csv')
cre = pd.read_csv('/content/tmdb_5000_credits.csv')

mov.head()

cre.head()

mov = mov.merge(cre,on='title')

mov.head()

mov.shape

mov.info()

mov= mov[['movie_id', 'title', 'overview', 'genres','keywords', 'cast', 'crew']]

mov.head()

mov.info()

mov.isnull().sum()

mov.dropna(inplace = True)

mov.duplicated().sum()

mov.iloc[0].genres

def convert(obj):
  L = []

  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

mov['genres']= mov['genres'].apply(convert)

mov.head()

mov['keywords']= mov['keywords'].apply(convert)

mov.head()

def convert2(obj):
  L = []
  counter = 0

  for i in ast.literal_eval(obj):
    if counter != 4:
      L.append(i['name'])
      counter += 1
    else:
      break
  return L

mov['cast'] = mov['cast'].apply(convert2)

mov.head()

def fetch_d(obj):
  L = []

  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

mov['crew'] = mov['crew'].apply(fetch_d)

mov.head()

mov['overview'] = mov['overview'].apply(lambda x:x.split())

mov.head()

mov['genres'] = mov['genres'].apply(lambda x:[i.replace(" ","") for i in x])
mov['keywords'] = mov['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
mov['cast'] = mov['cast'].apply(lambda x:[i.replace(" ","") for i in x])
mov['crew'] = mov['crew'].apply(lambda x:[i.replace(" ","") for i in x])

mov.head()

mov['tags'] = mov['overview'] + mov['genres'] + mov['keywords'] + mov['cast'] + mov['crew']

mov.head()

movies = mov[['movie_id', 'title', 'tags']]

movies['tags']= movies['tags'].apply(lambda x:" ".join(x))

movies.head()

movies['tags'] = movies['tags'].apply(lambda x: x.lower())

movies.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

movies['tags'] = movies['tags'].apply(stem)

movies['tags'][1300]

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vectors = cv.fit_transform(movies['tags']).toarray()

vectors

cv.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity

sim = cosine_similarity(vectors)

sorted(list(enumerate(sim[0])), reverse = True, key = lambda x:x[1])

def recommend(movie):
  movie_index = movies[movies['title'] == movie].index[0]
  distances = sim[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse = True, key = lambda x:x[1])[1:6]

  for i in movies_list:
    print(movies.iloc[i[0]].title)

recommend('Avatar')

import pickle

pickle.dump(movies,open('movies.pkl','wb'))